{"name":"Blaubot","tagline":"The Blaubot Library","body":"Blaubot\r\n=======\r\nBlaubot is a lightweight framework to form small networks via P2P connections such as Bluetooth-RFCOMM, Adhoc-WiFi or simple socket connections.\r\nBlaubot takes care of device discovery and connection establishment with the goal to minimize a developer's boilerplate code to set up these small networks.\r\n\r\nTl;dr our main goal is to let a developer call start(); and spare him as much hassle as possible to create ad hoc networks.\r\n\r\nRequirements Android\r\n=======\r\nAndroid 4.0.3 or higher\r\n\r\nGeneral Usage\r\n=======\r\n1) Obtain a Blaubot instance from a BlaubotFactory\r\n```java\r\n// Generate a UUID that is unique for your application\r\n// see http://www.famkruithof.net/uuid/uuidgen\r\nfinal UUID APP_UUID = UUID.fromString(\"ec127529-2e9c-4046-a5a5-144feb30465f\"); \r\nBlaubot blaubot = BlaubotAndroidFactory.createEthernetBlaubot(APP_UUID);\r\n```\r\n2) (optional) Register a ILifecycleListener to the Blaubot instance\r\n```java\r\nblaubot.addLifecycleListener(new ILifecycleListener() {\r\n\t\t\t\r\n\t@Override\r\n\tpublic void onPrinceDeviceChanged(IBlaubotDevice oldPrince,\tIBlaubotDevice newPrince) {\r\n\t    // if the network's king goes down, the prince will rule over the remaining peasants\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onDisconnected() {\r\n\t \t// THIS device disconnected from the network\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onDeviceLeft(IBlaubotDevice blaubotDevice) {\r\n\t  // ANOTHER device disconnected from the network\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onDeviceJoined(IBlaubotDevice blaubotDevice) {\r\n\t  // ANOTHER device connected to the network THIS device is on\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onConnected() {\r\n\t  // THIS device connected to a network\r\n\t  // onDeviceJoined(...) calls will follow for each OTHER device that was already connected\r\n\t}\r\n\t\r\n});\r\n```\r\n3) Start Blaubot\r\n```java\r\nblaubot.startBlaubot();\r\n```\r\n4) Create a Channel \r\n```java\r\nfinal short channelId = (short) 1;\r\nfinal IChannel channel = blaubot.createChannel(channelId);\r\n```\r\n4.1) Send messages to all subscribers of this channel\r\n```java\r\nchannel.post(\"Hello world!\".getBytes(Charset.forName(\"UTF-8\")));\r\n```\r\n4.2) Subscribe to the channel via channel.subsribe(<YourListener>) to receive messages\r\n```java\r\nchannel.subscribe(new IMessageListener() {\r\n\t\r\n\t@Override\r\n\tpublic void onMessage(BlaubotMessage message) {\r\n\t\t// we got a message - our payload is a byte array\r\n\t\t// deserialize\r\n\t\tString msg = new String(message.getPayload(), Charset.forName(\"UTF-8\"));\r\n\t\t// .. do something useful ..\r\n\t}\r\n\t\r\n});\r\n```\r\n\r\nIf you registered the listener in step 2, you will be informed if your own device or other devices join or leave a network.\r\n\r\nQuickstart Java\r\n=======\r\n1. Get the General-JAR and add it to your project's dependencies.\r\n2. Create a Blaubot instance using de.hsrm.blaubot.core.BlaubotFactory\r\n\r\nYou can choose between a fixed set of devices to form net Blaubot network or to dynamically search and discover nearby running Blaubot instances via multicast from the Factory's methods. \r\nIf your targeted environment supports multicasts, this should be the easiest option for you to get your app working.\r\n\r\n\r\nQuickstart Android\r\n=======\r\n\r\n1. Get the Android-JAR and add it to your project's dependencies.\r\n2. Create a Blaubot instance using de.hsrm.blaubot.android.BlaubotFactory\r\n\r\nOn Android you can rely on the standard ethernet-based Blaubot options provided (see Quickstart Java) but you can also use the Bluetooth enabled Blaubot.\r\nPlease note that you have to use a different Factory to create Blaubot instances optimized for the Android platform.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}